package transport

import (
	"advertiser/shared/pkg/service/constants"
	"advertiser/shared/pkg/service/repo/models"
	"advertiser/shared/pkg/service/transport"
	"advertiser/shared/pkg/service/types"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/pkg/errors"
	uuid "github.com/satori/go.uuid"
	"go.uber.org/zap"
	"gorm.io/gorm"
	"strconv"
	"strings"
)

func (s *Service) NavigateToPage(params transport.CallBackQueryParams) types.CustomMessage {
	switch params.Page {
	case constants.Start:
		return s.start(params.UserID)
	case constants.Back:
		return s.back(params.UserID)

	case constants.Help:
		return s.help(params.UserID)
	case constants.ReportBug:
		return s.reportBugPrompt(params.UserID)
	case constants.RequestFeature:
		return s.requestFeaturePrompt(params.UserID)
	case constants.Support:
		return s.support(params.UserID)

	case constants.AllTopics:
		return s.allTopics(params.UserID)
	case Moderate:
		return s.moderate(params.UserID)
	case MyChannels:
		return s.listMyChannels(params.UserID)
	case ListChannelInfo:
		return s.listChannelTopics(params.UserID, params.Variable)
	case EditChannelTopics:
		return s.editTopicsPrompt(params.UserID, params.Variable, false)
	case EditChannelLocation:
		return s.editChannelLocationPrompt(params.UserID, params.Variable)
	case SetChannelLocation:
		return s.setChannelLocation(params.UserID, params.Variable, params.SecondVariable)
	case ModerateDetails:
		return s.getAdvertisementDetails(params.UserID, params.Variable)
	case constants.ViewAdMessage:
		return s.viewAdMessage(params.UserID, params.Variable)
	case PostNow:
		return s.moderationDecision(params.UserID, PostNow, params.Variable)
	case RejectAd:
		return s.moderationDecision(params.UserID, RejectAd, params.Variable)

	default:
		return s.start(params.UserID)
	}
}

func (s *Service) start(respondTo int64) types.CustomMessage {
	s.resetState(respondTo)

	return types.NewCustomMessageConfig(
		tgbotapi.NewMessage(respondTo, "–©–æ —à—É–∫–∞—î—Ç–µ?"),
		[][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonData("–ú–æ—ó –∫–∞–Ω–∞–ª–∏ –∑ –±–æ—Ç–æ–º", fmt.Sprintf("%s", MyChannels))},
			{tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø–æ —Ä–µ–∫–ª–∞–º—ñ", fmt.Sprintf("%s", Moderate))},
			{tgbotapi.NewInlineKeyboardButtonData("–í—Å—ñ —Ç–æ–ø—ñ–∫–∏", fmt.Sprintf("%s", constants.AllTopics))},
			{tgbotapi.NewInlineKeyboardButtonData("–î–æ–ø–æ–º–æ–≥–∞", fmt.Sprintf("%s", constants.Help))},
		},
		true,
		false,
		false,
	)
}

func (s *Service) help(respondTo int64) types.CustomMessage {
	s.resetState(respondTo)

	return types.NewCustomMessageConfig(
		tgbotapi.NewMessage(respondTo, "–©–æ —Ç–∞–º —É –≤–∞—Å?"),
		[][]tgbotapi.InlineKeyboardButton{
			{tgbotapi.NewInlineKeyboardButtonData("–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É üêû", fmt.Sprintf("%s", constants.ReportBug))},
			{tgbotapi.NewInlineKeyboardButtonData("–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª", fmt.Sprintf("%s", constants.RequestFeature))},
			{tgbotapi.NewInlineKeyboardButtonData("–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ —Ç–µ—Ö–Ω—ñ—á–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É", fmt.Sprintf("%s", constants.Support))},
		},

		true,
		false,
		false,
	)
}

func (s *Service) reportBug(respondTo int64, bugDescription string) types.CustomMessage {
	s.resetState(respondTo)

	var msg tgbotapi.MessageConfig

	err := s.uc.ReportBug(respondTo, bugDescription)
	if err != nil {
		zap.L().Error("failed to report bug", zap.Error(err))
		msg = tgbotapi.NewMessage(respondTo, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤–∞—à –∑–≤—ñ—Ç")
	} else {
		msg = tgbotapi.NewMessage(respondTo, "–î—è–∫—É—é –∑–∞ –≤–∞—à –∑–≤—ñ—Ç!")
	}

	return types.NewCustomMessageConfig(
		msg,
		nil,
		true,
		false,
		false,
	)
}

func (s *Service) requestFeature(respondTo int64, featureDescription string) types.CustomMessage {
	s.resetState(respondTo)

	var msg tgbotapi.MessageConfig

	err := s.uc.RequestFeature(respondTo, featureDescription)
	if err != nil {
		zap.L().Error("failed to request feature", zap.Error(err))
		msg = tgbotapi.NewMessage(respondTo, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç")
	} else {
		msg = tgbotapi.NewMessage(respondTo, "–î—è–∫—É—é –∑–∞ –≤–∞—à –∑–∞–ø–∏—Ç!")
	}

	return types.NewCustomMessageConfig(
		msg,
		nil,
		true,
		false,
		false,
	)
}

func (s *Service) support(respondTo int64) types.CustomMessage {
	return types.NewCustomMessageConfig(
		tgbotapi.NewMessage(respondTo, fmt.Sprintf("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –∞–¥—Ä–µ—Å—É %s", constants.TolokaDigitalEmail)),
		nil,
		true,
		false,
		false,
	)
}

func (s *Service) back(respondTo int64) types.CustomMessage {
	state := s.getState(respondTo)
	if len(state.crumbs) <= 1 {
		return s.start(respondTo)
	}

	params := state.crumbs[len(state.crumbs)-2]
	state.crumbs = state.crumbs[:len(state.crumbs)-1]
	state.state = StateStart

	s.setState(respondTo, state)

	return s.NavigateToPage(params)
}

func (s *Service) allTopics(respondTo int64) types.CustomMessage {
	msgText := fmt.Sprintf(`
–ù–∞—è–≤–Ω—ñ —Ç–æ–ø—ñ–∫–∏:
%s
`, strings.Join(s.uc.AllTopics(), ", "))

	return types.NewCustomMessageConfig(
		tgbotapi.NewMessage(respondTo, msgText),
		nil,
		true,
		false,
		false,
	)
}

func (s *Service) listMyChannels(respondTo int64) types.CustomMessage {
	var msg tgbotapi.MessageConfig
	myChannels, err := s.uc.ListMyChannels(respondTo)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			msg = tgbotapi.NewMessage(respondTo,
				`–£ –≤–∞—Å —â–µ –Ω–µ –º–∞—î –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö.
–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ –∫–∞–Ω–∞–ª—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –¥–æ–∑–≤–æ–ª–∞–º–∏:
1. –î–æ–∑–≤—ñ–ª –Ω–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ 3/3 
(–Ω–µ —Ö–≤–∏–ª—é–π—Ç–µ—Å—è, –±–æ—Ç –±—É–¥–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –∑ –≤–∞–º–∏)
`)
		} else {
			zap.L().Error("failed to list channels", zap.Error(err))
			msg = tgbotapi.NewMessage(respondTo, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤")
		}

		return types.NewCustomMessageConfig(
			msg,
			nil,
			true,
			false,
			false,
		)

	}

	var channelButtons []tgbotapi.InlineKeyboardButton
	for channelID, channelName := range myChannels {
		data := fmt.Sprintf("%s/%s", ListChannelInfo, strconv.FormatInt(channelID, 10))
		channelButtons = append(channelButtons, tgbotapi.NewInlineKeyboardButtonData(channelName, data))
	}

	return types.NewCustomMessageConfig(
		tgbotapi.NewMessage(respondTo, "–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª:"),
		transport.MakeTwoButtonsInARow(channelButtons),
		true,
		false,
		false,
	)
}

func (s *Service) listChannelTopics(respondTo int64, rawChannelID string) types.CustomMessage {
	channelID, err := strconv.ParseInt(rawChannelID, 10, 64)
	if err != nil {
		zap.L().Panic("failed to parse string to int64")
	}

	var msg tgbotapi.MessageConfig
	channelInfo, err := s.uc.GetChannelInfo(channelID)
	if err != nil {
		zap.L().Error("failed to get channel info", zap.Error(err))
		msg = tgbotapi.NewMessage(respondTo, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª")
	} else {
		var topics []string
		for _, topic := range channelInfo.Topics {
			topics = append(topics, topic.ID)
		}

		var text string
		if len(topics) == 0 {
			text = fmt.Sprintf("%s –Ω–µ –º–∞—î —Ç–æ–ø—ñ–∫—ñ–≤, –∑–∞–¥–∞–π—Ç–µ —ó—Ö —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø–æ —Ä–µ–∫–ª–∞–º—ñ", channelInfo.Title)
		} else {
			text = fmt.Sprintf(`<b>%s</b>
–õ–æ–∫–∞—Ü—ñ—è: %s
–¢–æ–ø—ñ–∫–∏: %s`,
				channelInfo.Title,
				constants.Locations[channelInfo.Location],
				strings.Join(topics, ", "),
			)
		}
		msg = tgbotapi.NewMessage(respondTo, text)
	}

	buttons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData(
				"–ó–º—ñ–Ω–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é",
				fmt.Sprintf("%s/%s", EditChannelLocation, strconv.FormatInt(channelID, 10)),
			),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData(
				"–ó–º—ñ–Ω–∏—Ç–∏ —Ç–æ–ø—ñ–∫–∏",
				fmt.Sprintf("%s/%s", EditChannelTopics, strconv.FormatInt(channelID, 10)),
			),
		},
	}

	return types.NewCustomMessageConfig(
		msg,
		buttons,
		true,
		false,
		false,
	)
}

func (s *Service) editChannelTopics(respondTo, channelID int64, topics []string) types.CustomMessage {
	state := s.getState(respondTo)

	s.resetState(respondTo)

	var msg tgbotapi.MessageConfig

	var normalizedTopics []string
	for _, topic := range topics {
		normalizedTopics = append(normalizedTopics, strings.ToLower(strings.TrimSpace(topic)))
	}

	err := s.uc.UpdateChannelTopics(channelID, normalizedTopics)
	if err != nil {
		zap.L().Error("failed to update channel topics", zap.Error(err))
		msg = tgbotapi.NewMessage(respondTo, fmt.Sprintf("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–ø—ñ–∫–∏ –∫–∞–Ω–∞–ª—É. –ü–æ–º–∏–ª–∫–∞: %v", err))
	} else {
		text := fmt.Sprintf("–û–Ω–æ–≤–ª–µ–Ω–æ, –ø–æ—Ç–æ—á–Ω—ñ —Ç–æ–ø—ñ–∫–∏: %s", strings.Join(normalizedTopics, ", "))
		msg = tgbotapi.NewMessage(respondTo, text)
	}

	if state.storeInitialChannelData {
		s.tgBotApi.Send(types.NewCustomMessageConfig(
			msg,
			nil,
			false,
			false,
			false,
		))

		return s.editChannelLocationPrompt(respondTo, strconv.FormatInt(channelID, 10))
	} else {
		return types.NewCustomMessageConfig(
			msg,
			nil,
			true,
			false,
			false,
		)
	}
}

func (s *Service) setChannelLocation(respondTo int64, rawChannelID, rawLocation string) types.CustomMessage {
	s.resetState(respondTo)

	channelID, err := strconv.ParseInt(rawChannelID, 10, 64)
	if err != nil {
		zap.L().Error("failed to parse string to int64 in setChannelLocation")
	}

	location, err := strconv.Atoi(rawLocation)
	if err != nil {
		zap.L().Error("failed to parse string to int in setChannelLocation")
	}

	var msg tgbotapi.MessageConfig

	err = s.uc.UpdateChannelLocation(channelID, constants.Location(location))
	if err != nil {
		zap.L().Error("failed to update channel location", zap.Error(err))
		msg = tgbotapi.NewMessage(respondTo, fmt.Sprintf("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é –∫–∞–Ω–∞–ª—É. –ü–æ–º–∏–ª–∫–∞: %v", err))
	} else {
		msg = tgbotapi.NewMessage(respondTo, fmt.Sprintf("–û–Ω–æ–≤–ª–µ–Ω–æ, –ø–æ—Ç–æ—á–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è - %s", constants.Locations[constants.Location(location)]))
	}

	return types.NewCustomMessageConfig(
		msg,
		nil,
		true,
		false,
		false,
	)
}

func (s *Service) moderate(id int64) types.CustomMessage {
	ads, err := s.uc.GetAdsToModerateByUserID(id)
	if err != nil {
		zap.L().Error("failed to get ads to moderate", zap.Error(err))
	}

	var msg tgbotapi.MessageConfig
	var rows [][]tgbotapi.InlineKeyboardButton
	if len(ads) == 0 {
		msg = tgbotapi.NewMessage(id, "–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –ø–æ —Ä–µ–∫–ª–∞–º—ñ —â–µ –Ω–µ –Ω–∞—Å—Ç–æ—è–ª–∏—Å—è, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ")
	} else {
		msg = tgbotapi.NewMessage(id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∫–ª–∞–º—É —ñ –≤–∏–Ω–µ—Å—ñ—Ç—å —Ä—ñ—à–µ–Ω–Ω—è:")
		for _, entry := range ads {
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("%s - %s (cpv: %v)", entry.Channel.Title, entry.Advertisement.Name, entry.Advertisement.CostPerMile),
				fmt.Sprintf("%s/%s", ModerateDetails, entry.ID),
			)))
		}
	}

	return types.NewCustomMessageConfig(
		msg,
		rows,
		true,
		false,
		false,
	)

}

func (s *Service) getAdvertisementDetails(chatID int64, advertisementChannelID string) types.CustomMessage {
	advertisementChannel, err := s.uc.GetAdChanDetails(advertisementChannelID)
	if err != nil {
		zap.L().Error("failed to get ad details", zap.Error(err))
		return nil
	}

	var msg tgbotapi.MessageConfig
	msg = tgbotapi.NewMessage(chatID, fmt.Sprintf(
		`
–¶—ñ–ª—å–æ–≤–∏–π –∫–∞–Ω–∞–ª: %s (@%s)
–î–µ—Ç–∞–ª—ñ —Ä–µ–∫–ª–∞–º–∏:
- –ù–∞–∑–≤–∞: %s
- Cost per mile: %v USD
`,
		advertisementChannel.Channel.Title,
		advertisementChannel.Channel.Handle,
		advertisementChannel.Advertisement.Name,
		advertisementChannel.Advertisement.CostPerMile,
	))

	rows := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonData(
			"–î–∏–≤–∏—Ç–∏—Å—å —Ä–µ–∫–ª–∞–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
			fmt.Sprintf("%s/%s", constants.ViewAdMessage, advertisementChannel.ID),
		)},
	}

	return types.NewCustomMessageConfig(
		msg,
		rows,
		true,
		false,
		true,
	)
}

func (s *Service) viewAdMessage(chatID int64, adChanID string) types.CustomMessage {
	ad, err := s.uc.GetAdMessageByAdChanID(uuid.FromStringOrNil(adChanID))
	if err != nil {
		zap.L().Error("failed to get advertisement details", zap.Error(err))

		return types.NewCustomMessageConfig(
			tgbotapi.NewMessage(chatID, fmt.Sprintf("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü–æ–º–∏–∫–ª–∞: %v", err)),
			nil,
			true,
			false,
			false,
		)
	}

	msg := transport.ComposeAdMessage(
		chatID,
		*ad,
		[][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("%s", "–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑"),
					fmt.Sprintf("%s/%s", PostNow, adChanID),
				),
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("%s", "–í—ñ–¥—Ö–∏–ª–∏—Ç–∏"),
					fmt.Sprintf("%s/%s", RejectAd, adChanID),
				),
			},
		},
		true,
		false,
	)

	return msg
}

func (s *Service) moderationDecision(respondTo int64, decision string, adChanID string) types.CustomMessage {
	var err error
	var msg tgbotapi.MessageConfig

	switch decision {
	case PostNow:
		err = s.PostAdvertisement(adChanID)
		if err != nil {
			msg = tgbotapi.NewMessage(respondTo, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ä–µ–∫–ª–∞–º—É")
		} else {
			msg = tgbotapi.NewMessage(respondTo, "–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ! –ì–æ—Ç—É–π—Ç–µ –º—ñ—à–∫–∏ –¥–ª—è –≥—Ä–æ—à–µ–π :)")
		}
	case RejectAd:
		err = s.uc.UpdateAdChanEntry(models.AdvertisementChannel{
			ID:     uuid.FromStringOrNil(adChanID),
			Status: models.AdChanRejected,
		})
		if err != nil {
			zap.L().Error("failed to update advertisement status", zap.Error(err))

			return types.NewCustomMessageConfig(
				tgbotapi.NewMessage(respondTo, "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É"),
				nil,
				true,
				true,
				false,
			)
		} else {
			s.setState(respondTo, stateData{
				state:    StateWaitForRejectReason,
				adChanID: adChanID,
			})

			return types.NewCustomMessageConfig(
				tgbotapi.NewMessage(respondTo, "–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è, –±—É–¥—å-–ª–∞—Å–∫–∞, –ø—Ä–∏—á–∏–Ω–æ—é –≤—ñ–¥–º–æ–≤–∏:"),
				nil,
				false,
				false,
				false,
			)

		}
	}

	return types.NewCustomMessageConfig(
		msg,
		nil,
		true,
		false,
		false,
	)
}

func (s *Service) saveRejectionReason(respondTo int64, adChanID, reason string) types.CustomMessage {
	s.resetState(respondTo)
	err := s.uc.UpdateAdChanEntry(models.AdvertisementChannel{
		ID:              uuid.FromStringOrNil(adChanID),
		RejectionReason: reason,
	})
	if err != nil {
		zap.L().Error("failed to update advertisement status", zap.Error(err))
	}

	return types.NewCustomMessageConfig(
		tgbotapi.NewMessage(respondTo, "–î—è–∫—É—é! –ú–∏ –≤—Ä–∞—Ö—É—î–º–æ —Ü–µ."),
		nil,
		true,
		false,
		false,
	)
}
